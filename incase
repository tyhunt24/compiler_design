%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "symbolTable.h"
#include "symtab.h"
#include "AST.h"
#include "IrCode.h"
#include "Assembly.h"

extern int yylex();
extern int yyparse();

extern FILE* yyin;

void yyerror(const char* s);
char currentScope[50] = "global";
char label[50];
char otherScope[50];
char returnName[50];

char *returnType;

int semanticChecks = 1;

//$$ parses the tree back together
//parser: reads right to left
//find the first argument and second argument in this statement


/*
  1. Try to get a really simple function running in MIPS. 

 */

%}

%union {
    int number;
    char character;
    char* string;
    struct AST* ast;
}

%token <string> TYPE
%token <string> ID
%token <char> SEMICOLON
%token <char> COMMA
%token <char> EQ
%token <char> OPAREN
%token <char> CPAREN
%token <char> OBRACK
%token <char> CBRACK
%token <char> OCBRACE
%token <char> CCBRACE
%token <char> PLUS
%token <char> MINUS
%token <char> MULTIPLY
%token <char> DIVIDE
%token <number> NUMBER
%token WRITE
%token RETURN

%printer { fprintf(yyoutput, "%s", $$); } ID;
%printer { fprintf(yyoutput, "%d", $$); } NUMBER;

%type <ast> Program DeclList Decl VarDeclList VarDecl FunDecl ParamDecl ParamDecList ParamDecListTail Block CallList StmtList Stmt Expr Math
%left PLUS MINUS
%left MULTIPLY DIVIDE

%start Program

%%
Program: DeclList  {$$ = $1;
                        endMipsFile();
                    }
        
;

DeclList:   Decl DeclList   {$1->left = $2;
                             $$ = $1;
                            }
    | Decl  { $$ = $1; }
;

Decl: FunDecl
    | VarDeclList
    | StmtList
;

VarDeclList: {$$ = NULL;}
|   VarDecl VarDeclList
;

VarDecl:    TYPE ID SEMICOLON {printf("\n RECOGNIZED RULE: VARIABLE DECLERATION\n");
                                // ----- Semantic Checks ----- //
                                if (find($2, currentScope) == 1) {
                                    printf("\n Semantic Checks: Variable already declared\n");
                                   // exit(0);
                                   // semanticChecks = 0;
                                }

                                // ----- Symbol Table ----- //
                                insert($2, "var", $1, currentScope);

                                // ----- AST Actions ----- //
                                $$ = AST_assignment("TYPE", $1, $2);

                                printList();
                            }
    |       TYPE ID OBRACK NUMBER CBRACK SEMICOLON {printf("\n Array Decleration\n");
                                                    // ? Semantic Checks

                                                    // ? Symbol Table

                                                    // ? AST Actions
                                                    
                                                    }

;

FunDecl: TYPE ID OPAREN                        {

                            // ----- Symbol Table ----- //
                            insert($2, "func", $1, currentScope);

                            //Get the Current Scope
                            strcpy(currentScope, $2);
                            strcpy(label, $2);
                         } 
 ParamDecList CPAREN Block {printf("\nFunction\n");

                             //----- Semantic Checks ----- //
                             // ? This should work but it does not work IDK why.
                             if($1 != returnType) {
                                printf("\nSemantic Error\n");
                             }
                            printf("\n%s: %s\n\n\n", $1, returnType);
                            
                            // ----- AST Tree ----- //
                            struct AST* rightHand = malloc(sizeof(struct AST));
                            rightHand = add_tree($2, NULL, $7);
                            //printf("\n\n%s\n\n", $7->right);
                            $$ = ast_func("func", $1, rightHand); 

                            // ----- IR code ----- //
                            labelFunction(label);
                            MipsCreateFunction(label);

                         }
;

ParamDecList: {$$ = NULL;}
    |   ParamDecListTail   
;

ParamDecListTail: ParamDecl
    |   ParamDecl COMMA ParamDecListTail
;

ParamDecl: TYPE ID {printf("\nEncountered Parameter\n");
                        insert($2, "param", $1, currentScope);
                    }
|   TYPE ID OBRACK CBRACK {printf("\nParameter Array\n");}
;

Block:  OCBRACE VarDeclList StmtList CCBRACE {printf("\nBlock Statement\n");
                                                
                                                //----- AST Actions ----- //
                                                $$ = add_tree("block", $2, $3);

                                                strcpy(currentScope, "global");
                                            }
;

StmtList: Stmt  
        | Stmt StmtList
;

Stmt: Expr SEMICOLON {$$ = $1;}
;

Expr:   Math {printf("\nRECOGNIZED RULE: Primary Statement\n");
                    $$ = $1;

                }
    |   ID EQ ID {printf("\nRECONGINZED RULE: Assignment statement\n");
                // ----- AST Actions ----- //
                $$ = AST_assignment("=", $1, $3);

                //----- Semantic Checks -----//
                    int semanticChecks = 1;
                    if(found($1, currentScope)  == 0) {
                        printf("Semantic Error: %s is not intialized\n", $1);
                        semanticChecks = 0;
                    }

                    if(found($3, currentScope)  == 0) {
                        printf("Semantic Error: %s is not intialized\n", $3);
                        semanticChecks = 0;
                    }

                    // Checks Variable Types
                    char *varType1 = getVarType($1, currentScope);
                    char *varType2 = getVarType($1, currentScope);

                    if(strcmp(varType1, varType2) != 0) {
                        printf("\nSemantic Error: variables Type mistmatch\n");
                        semanticChecks = 0;
                    }


                    // Update the Value in $1
                    updateVal($1, currentScope, getValue($3, currentScope));
                    
                    // Perform Semantic Actions
                    if(semanticChecks = 1) {
                        printf("\n Passed Semantic Checks\n");

                        //emit IR code

                        // emit Mips Code 
                    }
                 }

    |   ID EQ NUMBER {printf("\n RECONGIZED RULE: Number Decleration\n");
                        // ----- Semantic Checks ----- //
                            // IF the variables type do not work
                            if(strcmp(getVarType($1, currentScope), "int") != 0) {
                                printf("\n Variable is not of Type Int\n");
                                semanticChecks = 0;
                                exit(0);
                            }

                        // ----- Symbol Table ----- //
                        char str[50];
                        sprintf(str, "%d", $3);
                        updateVal($1, currentScope, str);

                        // ----- AST Actions ----- //
                        $$ = AST_assignment("=", $1, str);

                    }
    
    | ID EQ ID OPAREN CallList CPAREN {printf("\nCall Function: In ID\n");
                                // ----- Semantic Checks ----- //

                                // ----- AST Actions ----- //

                                //Generate IR code
                                IRFunctionCall($3);
                                mipsJumpFunction(label);
                                
                                //Generate Mips Assembly Code

                            }   

        
    | ID OBRACK Expr CBRACK EQ Expr {printf("\n Recongized Rule: Array Expression\n"); 
                                        // ? Semantic Checks
                                        
                                        // ? Symbol Table

                                        // ? AST Actions
                                    }

    | ID EQ Math {printf("\nRecongized Rule: Math Expression\n");
                    // ----- AST Actions ----- //
                    $$ = idMathexp("=", $1, $3);

                    // ----- Semantic Checks ----- // 
                    if(find($1, currentScope) == 0) {
                        printf("\nError: Variable not found\n");
                        semanticChecks = 0;
                    }

                    //updates value to 2 + 2 = 4
                    updateVal($1, currentScope, $3->nodeType);

                    //----- IR Code----- //
                    emitConstantIntAssignment($1, $3->nodeType, currentScope);
                    mipsInside();
                    loadAddition($1, currentScope);
                    
                    //Gets the Other Scope
                    

                    printList();
                }

              
    |   WRITE ID {printf("\nRECONGIZED RULE: Print Statement\n");
                    $$ = AST_Write("Write", $2, ""); // place the write statement in AST

                    if(semanticChecks == 1) {
                       
                        //IR code
                        emitWriteId(returnName, otherScope);
                        
                        //Mips Code
                        writeValue(returnName, otherScope);
                    }
                }

    |   RETURN ID {printf("\nFunction Found: Return ID\n"); 
                    // AST actions
                    $$ = AST_Write("Return", $2, "");
                    
                    // Semantic Checks
                    char *returnID = getVarType($2, currentScope);
                    //strcpy(returnType, returnID);

                    strcpy(returnName, $2);
                    strcpy(otherScope, currentScope);
                    // Mips Code
                  
                } 
;


CallList: {$$ = NULL;}
        | Math {
            $$ = add_tree("Call", $1, NULL); 

            // ----- Generate MIPS Code ----- //
            paramMips();
        }
        | Math COMMA CallList {
            $$ = add_tree("Call", $1, $3);
            paramMips();
        }

//Everything below here should be fine.
Math: Math PLUS Math {printf("\nReconiged Rule: Addition Expression\n");
                            //intialize a number to 0
                             int num = 0;

                            //IF $1 and $3 are both numbers
                            if($1->isNumber && $3->isNumber == 1) {
                                
                                //change from characters to numbers
                                //And Add them
                                int num1 = atoi($1->nodeType);
                                int num3 = atoi($3->nodeType);
                                
                                //add the numbers and add it to first variable
                                int number = num1 + num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            }

                            //If the $1 is a number but the $3 is a variable
                            else if($1->isNumber == 1) {
                                
                                //convert the number from Char to Num
                                //Get the value of the variable from the symbol table
                                //convert it from Char to num
                                int num1 = atoi($1->nodeType);
                                char *val1 = getValue($3->nodeType, currentScope);
                                int num3 = atoi(val1);

                                //add the numbers and add it to first variable
                                int number = num1 + num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            } 

                            //Now $1 is variable and $3 is number
                            else if($3->isNumber == 1) {
                                
                                //do the same as the steps before
                                char *val1 = getValue($1->nodeType, currentScope);
                                int num1 = atoi(val1);
                                int num3 = atoi($3->nodeType);

                                //add the numbers and add it to first variable
                                int number = num1 + num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            }

                            //if we are adding both variables and no numbers
                            else { 
                                addMips();
                                
                            }

                            /*change first nodeType to the added numbers
                            Ex: x(x=4) + y(y=5) = 9 = $1->nodeType
                            then if we have multiple expressions it will become:
                                 9 + Addition
                            */
                            sprintf($1->nodeType, "%d", num);
                            $$ = addTree($1->nodeType, 1);
   
                            }
        | Math MINUS Math {printf("\nReconiged Rule: Addition Expression\n");
                            //intialize a number to 0
                            int num = 0;

                            //IF $1 and $3 are both numbers
                            if($1->isNumber && $3->isNumber == 1) {
                                
                                //change from characters to numbers
                                //And Add them
                                int num1 = atoi($1->nodeType);
                                int num3 = atoi($3->nodeType);
                                
                                //add the numbers and add it to first variable
                                int number = num1 - num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            }

                            //If the $1 is a number but the $3 is a variable
                            else if($1->isNumber == 1) {
                                
                                //convert the number from Char to Num
                                //Get the value of the variable from the symbol table
                                //convert it from Char to num
                                int num1 = atoi($1->nodeType);
                                char *val1 = getValue($3->nodeType, currentScope);
                                int num3 = atoi(val1);

                                //add the numbers and add it to first variable
                                int number = num1 - num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            } 

                            //Now $1 is variable and $3 is number
                            else if($3->isNumber == 1) {
                                
                                //do the same as the steps before
                                char *val1 = getValue($1->nodeType, currentScope);
                                int num1 = atoi(val1);
                                int num3 = atoi($3->nodeType);

                                //add the numbers and add it to first variable
                                int number = num1 - num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            }

                            //if we are adding both variables and no numbers
                            else { 
                                
                            }
                            /*change first nodeType to the added numbers
                            Ex: x(x=4) + y(y=5) = 9 = $1->nodeType
                            then if we have multiple expressions it will become:
                                 9 + Addition
                            */
                            sprintf($1->nodeType, "%d", num);
                            $$ = addTree($1->nodeType, 1);
                            }

        | Math MULTIPLY Math {printf("\nReconiged Rule: Addition Expression\n");
                            //intialize a number to 0
                            int num = 0;

                            //IF $1 and $3 are both numbers
                            if($1->isNumber && $3->isNumber == 1) {
                                
                                //change from characters to numbers
                                //And Add them
                                int num1 = atoi($1->nodeType);
                                int num3 = atoi($3->nodeType);
                                
                                //add the numbers and add it to first variable
                                int number = num1 * num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            }

                            //If the $1 is a number but the $3 is a variable
                            else if($1->isNumber == 1) {
                                
                                //convert the number from Char to Num
                                //Get the value of the variable from the symbol table
                                //convert it from Char to num
                                int num1 = atoi($1->nodeType);
                                char *val1 = getValue($3->nodeType, currentScope);
                                int num3 = atoi(val1);

                                //add the numbers and add it to first variable
                                int number = num1 * num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            } 

                            //Now $1 is variable and $3 is number
                            else if($3->isNumber == 1) {
                                
                                //do the same as the steps before
                                char *val1 = getValue($1->nodeType, currentScope);
                                int num1 = atoi(val1);
                                int num3 = atoi($3->nodeType);

                                //add the numbers and add it to first variable
                                int number = num1 * num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            }

                            //if we are adding both variables and no numbers
                            else { 
                                

                                //printf("%d\n\n\n", num);
                            }
                            /*change first nodeType to the added numbers
                            Ex: x(x=4) + y(y=5) = 9 = $1->nodeType
                            then if we have multiple expressions it will become:
                                 9 + Addition
                            */
                            sprintf($1->nodeType, "%d", num);
                            $$ = addTree($1->nodeType, 1);
                            }

        | Math DIVIDE Math {printf("\nReconiged Rule: Addition Expression\n");
                            //intialize a number to 0
                            int num = 0;

                            //IF $1 and $3 are both numbers
                            if($1->isNumber && $3->isNumber == 1) {
                                
                                //change from characters to numbers
                                //And Add them
                                int num1 = atoi($1->nodeType);
                                int num3 = atoi($3->nodeType);
                                
                                //add the numbers and add it to first variable
                                int number = num1 / num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            }

                            //If the $1 is a number but the $3 is a variable
                            else if($1->isNumber == 1) {
                                
                                //convert the number from Char to Num
                                //Get the value of the variable from the symbol table
                                //convert it from Char to num
                                int num1 = atoi($1->nodeType);
                                char *val1 = getValue($3->nodeType, currentScope);
                                int num3 = atoi(val1);

                                //add the numbers and add it to first variable
                                int number = num1 / num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            } 

                            //Now $1 is variable and $3 is number
                            else if($3->isNumber == 1) {
                                
                                //do the same as the steps before
                                char *val1 = getValue($1->nodeType, currentScope);
                                int num1 = atoi(val1);
                                int num3 = atoi($3->nodeType);

                                //add the numbers and add it to first variable
                                int number = num1 / num3;
                                num += number;

                                //printf("%d\n\n\n", num);
                            }

                            //if we are adding both variables and no numbers
                            else { 
                               printf("Entered into this statement"); 
                            }
                            /*change first nodeType to the added numbers
                            Ex: x(x=4) + y(y=5) = 9 = $1->nodeType
                            then if we have multiple expressions it will become:
                                 9 + Addition
                            */
                            sprintf($1->nodeType, "%d", num);
                            $$ = addTree($1->nodeType, 1);
                            }

        | OPAREN Math CPAREN {
            $$ = $2;
        } 
        | ID {printf("\n ID\n");
            
            // Checks to make sure the ID is has already been declared
            if(find($1, currentScope) == 0) {
                printf("SemanticError: %s is not found\n", $1);
                semanticChecks = 0;
            }

            //if the variable type is wrong throw semantic error
            if (strcmp(getVariableType($1, currentScope), "int") != 0) {
                    printf("Error: Variable %s is not of Type of int", $1);
                    semanticChecks = 0;
                }

            $$ = addTree($1, 0);     
        }

        | NUMBER {printf("\n In Number\n");
        char str[50];
        sprintf(str, "%d", $1);
        $$ = addTree(str,1); // put the number into the bottom of the tree
    }

;

%%

int main(int argc, char**argv)
{
	// #ifdef YYDEBUG
	// 	yydebug = 1;
	// #endif

	printf("\n\n##### COMPILER STARTED #####\n\n");
    initIRcodeFile();
    initMipsFile();
	
	if (argc > 1){
	  if(!(yyin = fopen(argv[1], "r")))
          {
		perror(argv[1]);
		return(1);
	  }
	}

	yyparse();

}

void yyerror(const char* s) {
	fprintf(stderr, "Parse error: %s\n", s);
	exit(1);
}